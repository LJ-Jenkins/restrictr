% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/schema_recycle.r
\name{schema_recycle}
\alias{schema_recycle}
\alias{schema_recycle.list}
\title{Ensure list elements are of a specific size and recycle them if not}
\usage{
schema_recycle(.data, ...)

\method{schema_recycle}{list}(
  .data,
  ...,
  .names = NULL,
  .size = NULL,
  .error_call = caller_env()
)
}
\arguments{
\item{.data}{a list to check the lengths schema of.}

\item{...}{any number of \code{\link[rlang:args_data_masking]{data-masking}} name-value pairs
to be evaluated using \code{.data} as a data-mask. Should follow the format of
\code{name = expected_size}, e.g, \code{var_x = 10L} or \code{var_x = var_y}.}

\item{.names}{optional character vector of names which must be
present in the data.frame/list.}

\item{.size}{optional scalar integerish value for the size that
the data.frame/list must have.}

\item{.error_call}{the call environment to use for the error (passed to \link[rlang:abort]{rlang::abort}).}
}
\description{
If any of the data-masked named expressions in \code{...} are not the specified size,
then the object attempts to be recycled to the size specified in the expression.
\code{.names} and \code{.size} arguments can be used to check for given names and size of the
list. The checking of size and the recycling are from the \href{https://vctrs.r-lib.org/}{vctrs}
package (using \link[vctrs:vec_size]{vctrs::vec_size} and \link[vctrs:vec_recycle]{vctrs::vec_recycle}) and thus apply the
\href{https://vctrs.r-lib.org/reference/theory-faq-recycling.html}{vctrs recycling rules}.
}
\details{
See also \link[=schema]{schema} and \link[=schema_recycle]{schema_recycle},
as well as \link[=cast_if_not]{cast_if_not} for a non-data-masked version of casting.
}
\examples{
# NB: Some of these examples are expected to produce an error. To
#     prevent them from terminating a run with example() they are
#     piped into a call to try().

li <- list(x = 1, y = "hi", z = 1:2)
# li$x and li$y are recycled.
li |>
  schema_recycle(x = 5, y = 3)

li |>
  schema_recycle(z = 5) |>
  try()
# => Error: Can't recycle `z` (size 2) to size 5.

li |>
  schema_recycle(x = "hi") |>
  try()
# => Size argument for `z` is not numeric: class <character>.

# schema_recycle works sequentially with quosures, so references to objects will
# be after they have been evaluated:
li |>
  schema_recycle(x = vctrs::vec_size(z), y = vctrs::vec_size(x))

li |>
  schema_recycle(x = 1, .size = 5) |>
  try()
# => Error: Object `li` must have vctrs size `5`, not `3`.

li |>
  schema_recycle(x = 1, .names = c("x", "p")) |>
  try()
# => Error: Names `p` not found in `li`.

# injection and glue can be used to supply expressions, names, and messages:
li <- list(x = 1, z = 5)
x_name <- "x"
schema_recycle(li, !!x_name := z)
li$x <- 1:2
xg_name <- "{x_name}"
schema_recycle(li, {{ xg_name }} := 10) |> try()
# => Error: Can't recycle `x` (size 2) to size 10.
}
